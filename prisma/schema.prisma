// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- PAYMENT METHODS ----------

enum PaymentMethod {
  CARD_CRYPTO // Tribute (Card/Crypto)
  USDT_TRC20 // Оплата в USDT (TRC20)
  PAYPAL // PayPal
  STARS // Telegram Stars
  MANUAL // Ручная (на случай других)
}

enum PaymentStatus {
  PENDING // Ожидает оплаты
  AWAITING_CHECK // Пользователь оплатил, но админ должен подтвердить
  CONFIRMED // Оплата подтверждена админом
  FAILED // Ошибка / отмена
}

// ---------- MODELS ----------

model User {
  id         String   @id @default(cuid())
  telegramId String   @unique
  username   String?
  firstName  String?
  lastName   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  orders     Order[]

  @@map("users")
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String?
  price       Float
  image       String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]

  @@map("products")
}

model Bundle {
  id          String      @id @default(cuid())
  name        String
  description String?
  price       Float
  image       String?
  photos      Int         @default(0)
  videos      Int         @default(0)
  exclusive   Boolean     @default(false)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]

  @@map("bundles")
}

enum OrderType {
  PRODUCT
  BUNDLE
  VIP
  CUSTOM_VIDEO
  VIDEO_CALL
  RATING
}

model Order {
  id            String        @id @default(cuid())
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  telegramId        String?
  orderType     OrderType
  status        OrderStatus   @default(PENDING)
  paymentMethod PaymentMethod @default(MANUAL)
  paymentStatus PaymentStatus @default(PENDING)
  totalAmount   Float
  firstName     String?
  lastName      String?
  username      String?
  address       String?
  city          String?
  zipCode       String?
  screenshot    String?   
  rating    String?   
  country       String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  orderItems    OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product? @relation(fields: [productId], references: [id])
  productId String?
  bundle    Bundle?  @relation(fields: [bundleId], references: [id])
  bundleId  String?
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())

  @@map("order_items")
}

model WishlistItem {
  id          String   @id @default(cuid())
  name        String
  description String?
  image       String?
  price       Float?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("wishlist_items")
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}
